/*
 *  Proyecto Tpuy.
 *
 *  Ejemplo de Bot para telegram.
 *  Author: Riztan Gutierrez - riztan at gmail dot com
 *
 */

#xtranslate tracelog <xValues, ...> => QOUT( ALLTRIM(procname())+;
                                             ". Lin: ", ALLTRIM(STR(procline()))+hb_eol()+replicate(" ",3), ;
                                             <xValues>, hb_eol() )
#xtranslate NToStr( <nValue> ) => ALLTRIM(STR(<nValue>))

#include "xbscripts/tlgrmbot.xbs"
#include "tpy_xbs.ch"

#define _BOT_ID_     "1146478414:AAHK2r4uYT-2PdLPrXBmSj1RtX1THh7aWSM"
#define _BOT_NAME_   "@MegaOfertaBot"

Procedure bot_init()
   local oForm
   local cUpdate

   //View( curl_version() )
   //return .t.

   SET PUBLIC oForm    // <--  oForm es un objeto que hace de contenedor de variables.
                       //      escribir ::cUpdate es equivalente a oForm:cUpdate.

   qout( "Iniciando..." )
   ::oBot := TlgrmBot():New( _BOT_ID_, _BOT_NAME_ )
   
   ::nEspera := 3  // Tiempo en segundos para retomar el ciclo. 

   ::lContinue := .t.
   ::nCont := 0

   While ::lContinue .and. ::nCont < 10

      //-- Se puede quitar este contador para que el ciclo sea infinito.
      ::nCont++
      //tracelog ::nCont 
      

      ::oEntradas := ::oBot:getUpdates()  // Se solicita las actualizaciones a telegram. 

      if !hb_IsObject( ::oEntradas )
         hb_idleSleep( ::nEspera )
         tracelog "REINICIA CICLO"
         loop
      endif

      While !::oEntradas:Eof()
         qout( "Entrada "+NToStr(::oEntradas:RecNo()),"/",NToStr(::oEntradas:Len()) )
         ::oEntrada := ::oEntradas:Current()

         tracelog "contenido: " + hb_valtoexp(::oEntradas:Values())
         tracelog "Tipo de Entrada => "+ hb_valtoexp(::oEntradas:type)
         tracelog "Id => "+ hb_valtoexp(::oEntradas:id)

         ::cText := ""
         Do Case
         Case ::oEntrada:type = "callback_query"
            ::lCallback := .t.
            ::oMsg  := ::oEntrada:callback_query:message
            ::cText := ::oEntrada:callback_query:data
            
         Case ::oEntrada:type = "message"
            ::lCallback := .f.
            ::oMsg  := ::oEntrada:message
            ::cText := ::oMsg:text
            
         Other
            tracelog "La entrada tipo '"+::oEntrada:type+"' no la vamos a procesar... "
            ::oEntradas:Next()
            loop
         EndCase

         //-- Mensaje convertido en un arreglo de palabras. {"hola","¿como","estas?"}
         ::aTokens := ::oEntrada:tokens

         Do Case
         Case !Empty(::cText) //::lInstance .or. ::oMsg:IsDef("entities")
            Do Case
            Case ::aTokens[1] = "/start"
               if !::oBot:SendMessage( ::oMsg:from:id, "Hola "+;
                                   ::oMsg:from:first_name+". "+hb_eol()+;
                                   "Gracias por agregarme a tus contactos. "+;
                                   "Espero ser de utilidad!"  )
                  tracelog "No se envió el mensaje, se reinicia el ciclo"
                  loop
               endif

            Case ::aTokens[1] = "/ayuda" .or.  ::aTokens[1] = "/help" 
               if !::oBot:SendMessage( ::oMsg:chat:id, ;
                                   "Hola "+;
                                   iif(::lCallBack,;
                                            ::oEntrada:callback_query:from:first_name,;
                                            ::oMsg:from:first_name) + ", " +;
                                   "este es un bot de ejemplo hecho con TPuy. "+;
                                   "Un comando disponible: "+hb_eol()+;
                                   "<code>/prueba </code>"+hb_eol()+hb_eol()+;
                                   "Tambien puedes saludarme escribiendo: <b>hola</b>."+hb_eol()+;
                                   "Espero que mi programa fuente sea de utilidad. Saludos! " )
                  tracelog "No se envió el mensaje, se reinicia el ciclo"
                  loop
               endif

            Case ::aTokens[1] = "/prueba"
               ::hKeyboard := {"keyboard" => {{ {"text"=>"A"},                                          ;
                                                {"text"=>"B"},                                          ;
                                                {"text"=>"C"},                                          ;
                                                {"text"=>"D"},                                          ;
                                                {"text"=>"E"},                                          ;
                                                {"text"=>"F"},                                          ;
                                                {"text"=>"G"},                                          ;
                                                {"text" => "google", "url"=>"https://orseit.com.ve"} }},;
                               "resize_keyboard" => .t.,                                                ;
                               "one_time_keyboard" => .t.                                               ;
                              }
               if !::oBot:SendMessage( ::oMsg:chat:id, ;
                                       "Probando sonido...", ;
                                       ::oMsg, hb_jsonEncode( ::hKeyboard ) )
                  tracelog "No se envió el mensaje, se reinicia el ciclo"
                  loop
               endif


            Case ::aTokens[1] = "/kbinline"
tracelog "kbinline"
               ::aOpciones := {  ;
                                 {"text" => "orseit", "url" => "https://orseit.com.ve" }, ;
                                 {"text" => "twitter","url" => "https://twitter.com.ve"}, ;
                                 {"text" => "saluda", "callback_data" => "/ayuda" }       ;
                              }
               if !::oBot:InlineChoice( ::oMsg:chat:id, ;
                                        "texto para el mensaje", ;
                                        ::aOpciones, ;
                                        ::oMsg ;
                                      )
                  tracelog "No se envió el mensaje, se reinicia el ciclo"
                  loop
               endif

            Case ::oMsg:IsDef("text") .and. ::aTokens[1] = "hola" .and. Len(::aTokens) < 4
               if !::oBot:SendMessage( ::oMsg:chat:id, "Hola! ", ::oMsg )
                  tracelog "No se envió el mensaje, se reinicia el ciclo"
                  loop
               endif

            Other
               if ::oEntrada:type = "callback_query"
                  if !::oBot:SendMessage( ::oMsg:chat:id, ::cText, ::oMsg )
                     tracelog "No se envió el mensaje, se reinicia el ciclo"
                     loop
                  endif
               endif

            EndCase

         Other 
            if ::oEntrada:type = "message"
               if ::oMsg:chat:type $ "private"
                  if !::oBot:SendMessage( ::oMsg:chat:id, ;
                                      "No comprendo el mensaje ", ::oMsg )
                     tracelog "No se envió el mensaje, se reinicia el ciclo"
                     loop
                  endif
               endif
            endif

         EndCase

         ::oEntradas:Next()

      EndDo

      hb_idleSleep( ::nEspera )   

   EndDo

   ::oBot:End()

RETURN



//eof
